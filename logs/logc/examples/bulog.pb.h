// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bulog.proto

#ifndef PROTOBUF_bulog_2eproto__INCLUDED
#define PROTOBUF_bulog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace example {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bulog_2eproto();
void protobuf_AssignDesc_bulog_2eproto();
void protobuf_ShutdownFile_bulog_2eproto();

class PlayerBrief;
class BagChange;
class BagChange_Change;

enum BagChange_ChangeReason {
  BagChange_ChangeReason_CR_CHARGE = 1,
  BagChange_ChangeReason_CR_SELL = 2
};
bool BagChange_ChangeReason_IsValid(int value);
const BagChange_ChangeReason BagChange_ChangeReason_ChangeReason_MIN = BagChange_ChangeReason_CR_CHARGE;
const BagChange_ChangeReason BagChange_ChangeReason_ChangeReason_MAX = BagChange_ChangeReason_CR_SELL;
const int BagChange_ChangeReason_ChangeReason_ARRAYSIZE = BagChange_ChangeReason_ChangeReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* BagChange_ChangeReason_descriptor();
inline const ::std::string& BagChange_ChangeReason_Name(BagChange_ChangeReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    BagChange_ChangeReason_descriptor(), value);
}
inline bool BagChange_ChangeReason_Parse(
    const ::std::string& name, BagChange_ChangeReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BagChange_ChangeReason>(
    BagChange_ChangeReason_descriptor(), name, value);
}
enum EventType {
  EVT_LOGIN = 1,
  EVT_LOGOUT = 2,
  EVT_CHARGE = 3,
  EVT_BAG_CHANGE = 4,
  EVT_JOIN_ARMY = 5,
  EVT_QUIT_ARMY = 6,
  EVT_REPORT_ONELINE = 7,
  EVT_DUMP_RANK = 8
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = EVT_LOGIN;
const EventType EventType_MAX = EVT_DUMP_RANK;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class PlayerBrief : public ::google::protobuf::Message {
 public:
  PlayerBrief();
  virtual ~PlayerBrief();

  PlayerBrief(const PlayerBrief& from);

  inline PlayerBrief& operator=(const PlayerBrief& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBrief& default_instance();

  void Swap(PlayerBrief* other);

  // implements Message ----------------------------------------------

  PlayerBrief* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerBrief& from);
  void MergeFrom(const PlayerBrief& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:example.PlayerBrief)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint64 roleid_;
  friend void  protobuf_AddDesc_bulog_2eproto();
  friend void protobuf_AssignDesc_bulog_2eproto();
  friend void protobuf_ShutdownFile_bulog_2eproto();

  void InitAsDefaultInstance();
  static PlayerBrief* default_instance_;
};
// -------------------------------------------------------------------

class BagChange_Change : public ::google::protobuf::Message {
 public:
  BagChange_Change();
  virtual ~BagChange_Change();

  BagChange_Change(const BagChange_Change& from);

  inline BagChange_Change& operator=(const BagChange_Change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BagChange_Change& default_instance();

  void Swap(BagChange_Change* other);

  // implements Message ----------------------------------------------

  BagChange_Change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BagChange_Change& from);
  void MergeFrom(const BagChange_Change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 change = 3;
  inline bool has_change() const;
  inline void clear_change();
  static const int kChangeFieldNumber = 3;
  inline ::google::protobuf::int32 change() const;
  inline void set_change(::google::protobuf::int32 value);

  // optional int32 orgv = 4;
  inline bool has_orgv() const;
  inline void clear_orgv();
  static const int kOrgvFieldNumber = 4;
  inline ::google::protobuf::int32 orgv() const;
  inline void set_orgv(::google::protobuf::int32 value);

  // optional int32 newv = 5;
  inline bool has_newv() const;
  inline void clear_newv();
  static const int kNewvFieldNumber = 5;
  inline ::google::protobuf::int32 newv() const;
  inline void set_newv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:example.BagChange.Change)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_change();
  inline void clear_has_change();
  inline void set_has_orgv();
  inline void clear_has_orgv();
  inline void set_has_newv();
  inline void clear_has_newv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 change_;
  ::google::protobuf::int32 orgv_;
  ::google::protobuf::int32 newv_;
  friend void  protobuf_AddDesc_bulog_2eproto();
  friend void protobuf_AssignDesc_bulog_2eproto();
  friend void protobuf_ShutdownFile_bulog_2eproto();

  void InitAsDefaultInstance();
  static BagChange_Change* default_instance_;
};
// -------------------------------------------------------------------

class BagChange : public ::google::protobuf::Message {
 public:
  BagChange();
  virtual ~BagChange();

  BagChange(const BagChange& from);

  inline BagChange& operator=(const BagChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BagChange& default_instance();

  void Swap(BagChange* other);

  // implements Message ----------------------------------------------

  BagChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BagChange& from);
  void MergeFrom(const BagChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BagChange_Change Change;

  typedef BagChange_ChangeReason ChangeReason;
  static const ChangeReason CR_CHARGE = BagChange_ChangeReason_CR_CHARGE;
  static const ChangeReason CR_SELL = BagChange_ChangeReason_CR_SELL;
  static inline bool ChangeReason_IsValid(int value) {
    return BagChange_ChangeReason_IsValid(value);
  }
  static const ChangeReason ChangeReason_MIN =
    BagChange_ChangeReason_ChangeReason_MIN;
  static const ChangeReason ChangeReason_MAX =
    BagChange_ChangeReason_ChangeReason_MAX;
  static const int ChangeReason_ARRAYSIZE =
    BagChange_ChangeReason_ChangeReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChangeReason_descriptor() {
    return BagChange_ChangeReason_descriptor();
  }
  static inline const ::std::string& ChangeReason_Name(ChangeReason value) {
    return BagChange_ChangeReason_Name(value);
  }
  static inline bool ChangeReason_Parse(const ::std::string& name,
      ChangeReason* value) {
    return BagChange_ChangeReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .example.BagChange.Change change_list = 1;
  inline int change_list_size() const;
  inline void clear_change_list();
  static const int kChangeListFieldNumber = 1;
  inline const ::example::BagChange_Change& change_list(int index) const;
  inline ::example::BagChange_Change* mutable_change_list(int index);
  inline ::example::BagChange_Change* add_change_list();
  inline const ::google::protobuf::RepeatedPtrField< ::example::BagChange_Change >&
      change_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::example::BagChange_Change >*
      mutable_change_list();

  // required .example.BagChange.ChangeReason reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::example::BagChange_ChangeReason reason() const;
  inline void set_reason(::example::BagChange_ChangeReason value);

  // optional string tag = 3;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 3;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // @@protoc_insertion_point(class_scope:example.BagChange)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::example::BagChange_Change > change_list_;
  ::std::string* tag_;
  int reason_;
  friend void  protobuf_AddDesc_bulog_2eproto();
  friend void protobuf_AssignDesc_bulog_2eproto();
  friend void protobuf_ShutdownFile_bulog_2eproto();

  void InitAsDefaultInstance();
  static BagChange* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerBrief

// required string name = 1;
inline bool PlayerBrief::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerBrief::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerBrief::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerBrief::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerBrief::name() const {
  // @@protoc_insertion_point(field_get:example.PlayerBrief.name)
  return *name_;
}
inline void PlayerBrief::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:example.PlayerBrief.name)
}
inline void PlayerBrief::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:example.PlayerBrief.name)
}
inline void PlayerBrief::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:example.PlayerBrief.name)
}
inline ::std::string* PlayerBrief::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:example.PlayerBrief.name)
  return name_;
}
inline ::std::string* PlayerBrief::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlayerBrief::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:example.PlayerBrief.name)
}

// required uint64 roleid = 2;
inline bool PlayerBrief::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerBrief::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerBrief::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerBrief::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 PlayerBrief::roleid() const {
  // @@protoc_insertion_point(field_get:example.PlayerBrief.roleid)
  return roleid_;
}
inline void PlayerBrief::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:example.PlayerBrief.roleid)
}

// -------------------------------------------------------------------

// BagChange_Change

// required int32 type = 1;
inline bool BagChange_Change::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BagChange_Change::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BagChange_Change::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BagChange_Change::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BagChange_Change::type() const {
  // @@protoc_insertion_point(field_get:example.BagChange.Change.type)
  return type_;
}
inline void BagChange_Change::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:example.BagChange.Change.type)
}

// optional int32 id = 2;
inline bool BagChange_Change::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BagChange_Change::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BagChange_Change::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BagChange_Change::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BagChange_Change::id() const {
  // @@protoc_insertion_point(field_get:example.BagChange.Change.id)
  return id_;
}
inline void BagChange_Change::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:example.BagChange.Change.id)
}

// optional int32 change = 3;
inline bool BagChange_Change::has_change() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BagChange_Change::set_has_change() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BagChange_Change::clear_has_change() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BagChange_Change::clear_change() {
  change_ = 0;
  clear_has_change();
}
inline ::google::protobuf::int32 BagChange_Change::change() const {
  // @@protoc_insertion_point(field_get:example.BagChange.Change.change)
  return change_;
}
inline void BagChange_Change::set_change(::google::protobuf::int32 value) {
  set_has_change();
  change_ = value;
  // @@protoc_insertion_point(field_set:example.BagChange.Change.change)
}

// optional int32 orgv = 4;
inline bool BagChange_Change::has_orgv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BagChange_Change::set_has_orgv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BagChange_Change::clear_has_orgv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BagChange_Change::clear_orgv() {
  orgv_ = 0;
  clear_has_orgv();
}
inline ::google::protobuf::int32 BagChange_Change::orgv() const {
  // @@protoc_insertion_point(field_get:example.BagChange.Change.orgv)
  return orgv_;
}
inline void BagChange_Change::set_orgv(::google::protobuf::int32 value) {
  set_has_orgv();
  orgv_ = value;
  // @@protoc_insertion_point(field_set:example.BagChange.Change.orgv)
}

// optional int32 newv = 5;
inline bool BagChange_Change::has_newv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BagChange_Change::set_has_newv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BagChange_Change::clear_has_newv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BagChange_Change::clear_newv() {
  newv_ = 0;
  clear_has_newv();
}
inline ::google::protobuf::int32 BagChange_Change::newv() const {
  // @@protoc_insertion_point(field_get:example.BagChange.Change.newv)
  return newv_;
}
inline void BagChange_Change::set_newv(::google::protobuf::int32 value) {
  set_has_newv();
  newv_ = value;
  // @@protoc_insertion_point(field_set:example.BagChange.Change.newv)
}

// -------------------------------------------------------------------

// BagChange

// repeated .example.BagChange.Change change_list = 1;
inline int BagChange::change_list_size() const {
  return change_list_.size();
}
inline void BagChange::clear_change_list() {
  change_list_.Clear();
}
inline const ::example::BagChange_Change& BagChange::change_list(int index) const {
  // @@protoc_insertion_point(field_get:example.BagChange.change_list)
  return change_list_.Get(index);
}
inline ::example::BagChange_Change* BagChange::mutable_change_list(int index) {
  // @@protoc_insertion_point(field_mutable:example.BagChange.change_list)
  return change_list_.Mutable(index);
}
inline ::example::BagChange_Change* BagChange::add_change_list() {
  // @@protoc_insertion_point(field_add:example.BagChange.change_list)
  return change_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::example::BagChange_Change >&
BagChange::change_list() const {
  // @@protoc_insertion_point(field_list:example.BagChange.change_list)
  return change_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::example::BagChange_Change >*
BagChange::mutable_change_list() {
  // @@protoc_insertion_point(field_mutable_list:example.BagChange.change_list)
  return &change_list_;
}

// required .example.BagChange.ChangeReason reason = 2;
inline bool BagChange::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BagChange::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BagChange::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BagChange::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::example::BagChange_ChangeReason BagChange::reason() const {
  // @@protoc_insertion_point(field_get:example.BagChange.reason)
  return static_cast< ::example::BagChange_ChangeReason >(reason_);
}
inline void BagChange::set_reason(::example::BagChange_ChangeReason value) {
  assert(::example::BagChange_ChangeReason_IsValid(value));
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:example.BagChange.reason)
}

// optional string tag = 3;
inline bool BagChange::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BagChange::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BagChange::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BagChange::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& BagChange::tag() const {
  // @@protoc_insertion_point(field_get:example.BagChange.tag)
  return *tag_;
}
inline void BagChange::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set:example.BagChange.tag)
}
inline void BagChange::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:example.BagChange.tag)
}
inline void BagChange::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:example.BagChange.tag)
}
inline ::std::string* BagChange::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:example.BagChange.tag)
  return tag_;
}
inline ::std::string* BagChange::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BagChange::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:example.BagChange.tag)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::example::BagChange_ChangeReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::example::BagChange_ChangeReason>() {
  return ::example::BagChange_ChangeReason_descriptor();
}
template <> struct is_proto_enum< ::example::EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::example::EventType>() {
  return ::example::EventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bulog_2eproto__INCLUDED
