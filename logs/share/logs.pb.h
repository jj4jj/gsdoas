// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logs.proto

#ifndef PROTOBUF_logs_2eproto__INCLUDED
#define PROTOBUF_logs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace logs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logs_2eproto();
void protobuf_AssignDesc_logs_2eproto();
void protobuf_ShutdownFile_logs_2eproto();

class Event;
class Event_Actor;

// ===================================================================

class Event_Actor : public ::google::protobuf::Message {
 public:
  Event_Actor();
  virtual ~Event_Actor();

  Event_Actor(const Event_Actor& from);

  inline Event_Actor& operator=(const Event_Actor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Actor& default_instance();

  void Swap(Event_Actor* other);

  // implements Message ----------------------------------------------

  Event_Actor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Actor& from);
  void MergeFrom(const Event_Actor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string tag = 3;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 3;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // @@protoc_insertion_point(class_scope:logs.Event.Actor)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* tag_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_logs_2eproto();
  friend void protobuf_AssignDesc_logs_2eproto();
  friend void protobuf_ShutdownFile_logs_2eproto();

  void InitAsDefaultInstance();
  static Event_Actor* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Event_Actor Actor;

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .logs.Event.Actor actor = 4;
  inline bool has_actor() const;
  inline void clear_actor();
  static const int kActorFieldNumber = 4;
  inline const ::logs::Event_Actor& actor() const;
  inline ::logs::Event_Actor* mutable_actor();
  inline ::logs::Event_Actor* release_actor();
  inline void set_allocated_actor(::logs::Event_Actor* actor);

  // optional string data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional string src = 6;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 6;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // optional string tag = 7;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 7;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // optional uint32 flag = 8;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 8;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logs.Event)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_actor();
  inline void clear_has_actor();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 time_;
  ::logs::Event_Actor* actor_;
  ::std::string* data_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 flag_;
  ::std::string* src_;
  ::std::string* tag_;
  friend void  protobuf_AddDesc_logs_2eproto();
  friend void protobuf_AssignDesc_logs_2eproto();
  friend void protobuf_ShutdownFile_logs_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

// Event_Actor

// optional int32 type = 1;
inline bool Event_Actor::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Actor::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Actor::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Actor::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Event_Actor::type() const {
  // @@protoc_insertion_point(field_get:logs.Event.Actor.type)
  return type_;
}
inline void Event_Actor::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:logs.Event.Actor.type)
}

// optional uint64 id = 2;
inline bool Event_Actor::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Actor::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Actor::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Actor::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Event_Actor::id() const {
  // @@protoc_insertion_point(field_get:logs.Event.Actor.id)
  return id_;
}
inline void Event_Actor::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:logs.Event.Actor.id)
}

// optional string tag = 3;
inline bool Event_Actor::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Actor::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Actor::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Actor::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& Event_Actor::tag() const {
  // @@protoc_insertion_point(field_get:logs.Event.Actor.tag)
  return *tag_;
}
inline void Event_Actor::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set:logs.Event.Actor.tag)
}
inline void Event_Actor::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:logs.Event.Actor.tag)
}
inline void Event_Actor::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:logs.Event.Actor.tag)
}
inline ::std::string* Event_Actor::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:logs.Event.Actor.tag)
  return tag_;
}
inline ::std::string* Event_Actor::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Event_Actor::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:logs.Event.Actor.tag)
}

// -------------------------------------------------------------------

// Event

// required uint64 id = 1;
inline bool Event::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Event::id() const {
  // @@protoc_insertion_point(field_get:logs.Event.id)
  return id_;
}
inline void Event::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:logs.Event.id)
}

// required uint64 time = 2;
inline bool Event::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Event::time() const {
  // @@protoc_insertion_point(field_get:logs.Event.time)
  return time_;
}
inline void Event::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:logs.Event.time)
}

// required int32 type = 3;
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Event::type() const {
  // @@protoc_insertion_point(field_get:logs.Event.type)
  return type_;
}
inline void Event::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:logs.Event.type)
}

// optional .logs.Event.Actor actor = 4;
inline bool Event::has_actor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_actor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_actor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_actor() {
  if (actor_ != NULL) actor_->::logs::Event_Actor::Clear();
  clear_has_actor();
}
inline const ::logs::Event_Actor& Event::actor() const {
  // @@protoc_insertion_point(field_get:logs.Event.actor)
  return actor_ != NULL ? *actor_ : *default_instance_->actor_;
}
inline ::logs::Event_Actor* Event::mutable_actor() {
  set_has_actor();
  if (actor_ == NULL) actor_ = new ::logs::Event_Actor;
  // @@protoc_insertion_point(field_mutable:logs.Event.actor)
  return actor_;
}
inline ::logs::Event_Actor* Event::release_actor() {
  clear_has_actor();
  ::logs::Event_Actor* temp = actor_;
  actor_ = NULL;
  return temp;
}
inline void Event::set_allocated_actor(::logs::Event_Actor* actor) {
  delete actor_;
  actor_ = actor;
  if (actor) {
    set_has_actor();
  } else {
    clear_has_actor();
  }
  // @@protoc_insertion_point(field_set_allocated:logs.Event.actor)
}

// optional string data = 5;
inline bool Event::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Event::data() const {
  // @@protoc_insertion_point(field_get:logs.Event.data)
  return *data_;
}
inline void Event::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:logs.Event.data)
}
inline void Event::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:logs.Event.data)
}
inline void Event::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:logs.Event.data)
}
inline ::std::string* Event::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:logs.Event.data)
  return data_;
}
inline ::std::string* Event::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Event::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:logs.Event.data)
}

// optional string src = 6;
inline bool Event::has_src() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_src() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_src() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_src() {
  if (src_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& Event::src() const {
  // @@protoc_insertion_point(field_get:logs.Event.src)
  return *src_;
}
inline void Event::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    src_ = new ::std::string;
  }
  src_->assign(value);
  // @@protoc_insertion_point(field_set:logs.Event.src)
}
inline void Event::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    src_ = new ::std::string;
  }
  src_->assign(value);
  // @@protoc_insertion_point(field_set_char:logs.Event.src)
}
inline void Event::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:logs.Event.src)
}
inline ::std::string* Event::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    src_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:logs.Event.src)
  return src_;
}
inline ::std::string* Event::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Event::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:logs.Event.src)
}

// optional string tag = 7;
inline bool Event::has_tag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event::set_has_tag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event::clear_has_tag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& Event::tag() const {
  // @@protoc_insertion_point(field_get:logs.Event.tag)
  return *tag_;
}
inline void Event::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set:logs.Event.tag)
}
inline void Event::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:logs.Event.tag)
}
inline void Event::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:logs.Event.tag)
}
inline ::std::string* Event::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:logs.Event.tag)
  return tag_;
}
inline ::std::string* Event::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Event::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:logs.Event.tag)
}

// optional uint32 flag = 8;
inline bool Event::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Event::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Event::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Event::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 Event::flag() const {
  // @@protoc_insertion_point(field_get:logs.Event.flag)
  return flag_;
}
inline void Event::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:logs.Event.flag)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace logs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logs_2eproto__INCLUDED
